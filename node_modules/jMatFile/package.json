{
  "_args": [
    [
      {
        "raw": "/Users/Longbiao/Downloads/jMatFile-master",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/Users/Longbiao/Downloads/jMatFile-master",
        "spec": "/Users/Longbiao/Downloads/jMatFile-master",
        "type": "directory"
      },
      "/Users/Longbiao/Projects/typhoon"
    ]
  ],
  "_from": "../../Downloads/jMatFile-master",
  "_id": "jMatFile@0.0.0",
  "_inCache": true,
  "_location": "/jMatFile",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/Users/Longbiao/Downloads/jMatFile-master",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/Users/Longbiao/Downloads/jMatFile-master",
    "spec": "/Users/Longbiao/Downloads/jMatFile-master",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "file:../../Downloads/jMatFile-master",
  "_shasum": "4b675458093780c24a0dd5f85f206550fa116b15",
  "_shrinkwrap": null,
  "_spec": "/Users/Longbiao/Downloads/jMatFile-master",
  "_where": "/Users/Longbiao/Projects/typhoon",
  "author": "",
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "bugs": {
    "url": "https://github.com/fluffynukeit/jMatFile/issues"
  },
  "dependencies": {},
  "description": "jBinary types for reading Matlab mat files.",
  "devDependencies": {
    "brfs": "^1.4.0",
    "chai": "^2.1.0",
    "jbinary": "^2.1.2",
    "mochify": "^2.7.0"
  },
  "homepage": "https://github.com/fluffynukeit/jMatFile#readme",
  "keywords": [
    "Matlab",
    "mat",
    "jBinary"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "jMatFile",
  "optionalDependencies": {},
  "readme": "# jMatFile\njBinary types for reading Matlab mat file with Javascript\n\n## Usage\nUse the MAT typeset defined in this package as you would any `jbinary` typeset.\n\nThis package includes extensive tests showing expected behavior.\n\nOnly mat file Level 5 is currently supported.\n\n```javascript\nvar jBinary = require('jbinary')\nvar MAT = require('jMatFile')\n\njBinary.load('myMat.mat', MAT).then(function (binary) {\n  var mat = binary.readAll\n  // or equivalently\n  var mat = binary.read('mat')\n  // ... do stuff with mat\n})\n```\n## Restrictions\nThis typeset is designed for use with JS engines that fully utilize typed\narrays.  Typed arrays provide enormous speed benefits compared to a naive\narray-based implementation because no new objects are created or pushed; memory\nis accessed directly as an array.\n\nAs a result, this typeset only works with JS engines that fully support typed\narrays.  As of this writing, this restriction knowingly excludes:\n\n* `phantomjs` because it does not support `Float64Array`\n* `nodejs` because of jdataview's special treatment of node Buffers\n\n## Mat object format\n\nThe returned Javascript object describing the mat file has the following key\nproperties.  The description here does not exhaustively define the format, but \nhits the most important elements for everyday use.\n\n* `header` - contains info from the mat file header, such as descriptive text,\nendianness, and version.\n* `variables` - array of objects describing each matlab variable.\n\nEach `variable` element has the following properties:\n\n* `name` describing the variable's name when it was saved.\n* Fields `size` for array of dimension lengths, `numel` for total number of \nelements, and `empty` flag for whether the number of elements is 0.  `size` \nalways has at least 2 elements.\n* `value`, a 2D (or higher) array, with each dimension matching the values in\n`size`. The elements of the array depend on the type of variable. \n* Flags `complex`, `logical`, `sparse`, `struct`, `object`, `global`, `cell`, \neach either `true` or `false`, indicating information about the data in the\nvariable.\n* If the `value` can be represented as a 1D iterable array (with possibly zero\nelements), the field `vector` will be present as a 1D array of elements.\n* If the `value` can be represented as a scalar, the field `scalar` will be\npresent and contain the equivalent scalar value.  Empty matrices are not scalars.\n* If the `value` can be represented as a string, the `string` field will be \npresent and contain the equivalent String object.\n* If the `value` is an object of a non-primitive class, the `class` field will\nbe present and contain the class name in string form.\n\n## Variable types\n\n* For real numeric types, each element is a Number.  For complex types, the \n`complex` flag is set to `true` and each element is an object with fields\n`re` and `im` for real and imaginary part, respectively.\n* For logical types, the `logical` flag is set to true, and each element is a \nBoolean.\n* For `string` types, each element of `value` is a string of a single character.\n* For `struct` types, each element is an object with fields matching the fields\nof the `struct`.  The field names can be retrieved with \n`Object.getOwnPropertyNames`.  The value of each field is a `variable` with\nits own `size`, flags, `value`, etc.\n* For `object` types, each element is the same as with `struct`.\n* For `cell` types, each element is a `variable` with its own `size`, flags, \n`value`, etc.\n\n\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fluffynukeit/jMatFile.git"
  },
  "scripts": {
    "cover": "mochify --cover",
    "phantom": "mochify --consolify myTests.html",
    "start": "mochify --watch",
    "test": "npm run phantom",
    "wd": "mochify --wd"
  },
  "version": "0.0.0"
}
